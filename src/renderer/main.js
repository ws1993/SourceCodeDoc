// Â∫îÁî®Áä∂ÊÄÅ
let selectedFiles = [];
let selectedPaths = new Set(); // Áî®‰∫éË∑üË∏™Â∑≤ÈÄâÊã©ÁöÑË∑ØÂæÑÔºåÈÅøÂÖçÈáçÂ§ç
let parsedCode = '';
let currentSettings = {
    linesPerPage: 50,
    headerText: '',
    outputFormat: 'docx',
    pageMode: 'all',
    pageRange: '',
    removeComments: true,
    removeEmptyLines: true
};

// DOMÂÖÉÁ¥†
const elements = {
    selectFiles: document.getElementById('selectFiles'),
    selectFolder: document.getElementById('selectFolder'),
    clearSelection: document.getElementById('clearSelection'),
    dropZone: document.getElementById('dropZone'),
    pathList: document.getElementById('pathList'),
    pathItems: document.getElementById('pathItems'),
    fileList: document.getElementById('fileList'),
    fileItems: document.getElementById('fileItems'),
    fileCount: document.getElementById('fileCount'),
    totalLines: document.getElementById('totalLines'),
    linesPerPage: document.getElementById('linesPerPage'),
    headerText: document.getElementById('headerText'),
    pageMode: document.getElementById('pageMode'),
    pageRange: document.getElementById('pageRange'),
    customPageRange: document.getElementById('customPageRange'),
    removeComments: document.getElementById('removeComments'),
    removeEmptyLines: document.getElementById('removeEmptyLines'),
    preview: document.querySelector('.preview'),
    previewContent: document.getElementById('previewContent'),
    estimatedPages: document.getElementById('estimatedPages'),
    previewLines: document.getElementById('previewLines'),
    generateBtn: document.getElementById('generateBtn'),
    progressModal: document.getElementById('progressModal'),
    progressText: document.getElementById('progressText'),
    statusText: document.getElementById('statusText')
};

// ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
function initializeEventListeners() {
    // Êñá‰ª∂ÈÄâÊã©ÊåâÈíÆ
    elements.selectFiles.addEventListener('click', handleSelectFiles);
    elements.selectFolder.addEventListener('click', handleSelectFolder);
    elements.clearSelection.addEventListener('click', handleClearSelection);
    
    // ÊãñÊãΩÂäüËÉΩ
    elements.dropZone.addEventListener('dragover', handleDragOver);
    elements.dropZone.addEventListener('dragleave', handleDragLeave);
    elements.dropZone.addEventListener('drop', handleDrop);
    
    // ËÆæÁΩÆÂèòÊõ¥
    elements.linesPerPage.addEventListener('change', updateSettings);
    elements.headerText.addEventListener('input', updateSettings);
    elements.pageMode.addEventListener('change', handlePageModeChange);
    elements.pageRange.addEventListener('input', updateSettings);
    elements.removeComments.addEventListener('change', updateSettings);
    elements.removeEmptyLines.addEventListener('change', updateSettings);
    
    // ÁîüÊàêÊåâÈíÆ
    elements.generateBtn.addEventListener('click', handleGenerate);
}

// Â§ÑÁêÜÈ°µÁ†ÅÊ®°ÂºèÂèòÊõ¥
function handlePageModeChange() {
    const pageMode = elements.pageMode.value;
    
    if (pageMode === 'custom') {
        elements.customPageRange.style.display = 'block';
    } else {
        elements.customPageRange.style.display = 'none';
    }
    
    updateSettings();
}

// Â§ÑÁêÜÊñá‰ª∂ÈÄâÊã©
async function handleSelectFiles() {
    try {
        const result = await window.electronAPI.selectFiles();
        if (!result.canceled && result.filePaths.length > 0) {
            await processSelectedPaths(result.filePaths);
        }
    } catch (error) {
        showError('ÈÄâÊã©Êñá‰ª∂Êó∂Âá∫ÈîôÔºö' + error.message);
    }
}

// Â§ÑÁêÜÊñá‰ª∂Â§πÈÄâÊã©
async function handleSelectFolder() {
    try {
        const result = await window.electronAPI.selectFolder();
        if (!result.canceled && result.filePaths.length > 0) {
            await processSelectedPaths(result.filePaths);
        }
    } catch (error) {
        showError('ÈÄâÊã©Êñá‰ª∂Â§πÊó∂Âá∫ÈîôÔºö' + error.message);
    }
}

// Â§ÑÁêÜÊãñÊãΩ
function handleDragOver(e) {
    e.preventDefault();
    elements.dropZone.classList.add('drag-over');
}

function handleDragLeave(e) {
    e.preventDefault();
    elements.dropZone.classList.remove('drag-over');
}

async function handleDrop(e) {
    e.preventDefault();
    elements.dropZone.classList.remove('drag-over');
    
    const files = Array.from(e.dataTransfer.files);
    const paths = files.map(file => file.path);
    
    if (paths.length > 0) {
        await processSelectedPaths(paths);
    }
}

// Â§ÑÁêÜÈÄâÊã©ÁöÑË∑ØÂæÑ
async function processSelectedPaths(paths, isRescan = false) {
    showProgress('Ê≠£Âú®Êâ´ÊèèÊñá‰ª∂...');

    try {
        let pathsToScan = paths;

        if (!isRescan) {
            // ËøáÊª§ÊéâÈáçÂ§çÁöÑË∑ØÂæÑ
            const newPaths = paths.filter(path => {
                const normalizedPath = path.replace(/\\/g, '/').toLowerCase();
                return !selectedPaths.has(normalizedPath);
            });

            if (newPaths.length === 0) {
                hideProgress();
                showError('ÊâÄÈÄâÊã©ÁöÑÊñá‰ª∂Â§πÂ∑≤ÁªèÊ∑ªÂä†Ëøá‰∫Ü');
                return;
            }

            pathsToScan = newPaths;

            // Ê∑ªÂä†Êñ∞Ë∑ØÂæÑÂà∞Â∑≤ÈÄâÊã©ÈõÜÂêà
            newPaths.forEach(path => {
                const normalizedPath = path.replace(/\\/g, '/').toLowerCase();
                selectedPaths.add(normalizedPath);
            });
        } else {
            // ÈáçÊñ∞Êâ´ÊèèÊ®°ÂºèÔºöÊ∏ÖÁ©∫Áé∞ÊúâÊñá‰ª∂ÂàóË°®
            selectedFiles = [];
            selectedPaths.clear();

            // ÈáçÊñ∞Ê∑ªÂä†Ë∑ØÂæÑ
            pathsToScan.forEach(path => {
                selectedPaths.add(path);
            });
        }

        // Êâ´ÊèèË∑ØÂæÑ‰∏≠ÁöÑÊñá‰ª∂
        const scannedFiles = await window.electronAPI.scanFiles(pathsToScan);

        if (!isRescan) {
            // ÂêàÂπ∂Êñ∞Êñá‰ª∂Âà∞Áé∞ÊúâÊñá‰ª∂ÂàóË°®
            selectedFiles = [...selectedFiles, ...scannedFiles];
        } else {
            // ÈáçÊñ∞Êâ´ÊèèÊ®°ÂºèÔºöÁõ¥Êé•‰ΩøÁî®Êñ∞Êâ´ÊèèÁöÑÊñá‰ª∂
            selectedFiles = scannedFiles;
        }

        // ÂéªÈáçÔºàÂü∫‰∫éÊñá‰ª∂Ë∑ØÂæÑÔºâ
        const uniqueFiles = [];
        const seenPaths = new Set();

        selectedFiles.forEach(file => {
            const normalizedPath = file.path.replace(/\\/g, '/').toLowerCase();
            if (!seenPaths.has(normalizedPath)) {
                seenPaths.add(normalizedPath);
                uniqueFiles.push(file);
            }
        });

        selectedFiles = uniqueFiles;

        updatePathList();
        updateFileList();
        await parseAndPreview();

        hideProgress();
        updateStatus(`Â∑≤ÈÄâÊã© ${selectedFiles.length} ‰∏™Êñá‰ª∂ÔºåÊù•Ëá™ ${selectedPaths.size} ‰∏™‰ΩçÁΩÆ`);
    } catch (error) {
        hideProgress();
        showError('Êâ´ÊèèÊñá‰ª∂Êó∂Âá∫ÈîôÔºö' + error.message);
    }
}

// Ê∏ÖÁ©∫ÈÄâÊã©
function handleClearSelection() {
    selectedFiles = [];
    selectedPaths.clear();
    parsedCode = '';

    updatePathList();
    updateFileList();
    elements.preview.style.display = 'none';
    elements.generateBtn.disabled = true;
    elements.clearSelection.style.display = 'none';

    updateStatus('Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÈÄâÊã©');
}

// ÁßªÈô§Âçï‰∏™Ë∑ØÂæÑ
function removePath(pathToRemove) {
    const normalizedPathToRemove = pathToRemove.replace(/\\/g, '/').toLowerCase();
    selectedPaths.delete(normalizedPathToRemove);

    // ÈáçÊñ∞Êâ´ÊèèÂâ©‰ΩôË∑ØÂæÑÁöÑÊñá‰ª∂
    if (selectedPaths.size > 0) {
        const remainingPaths = Array.from(selectedPaths);
        processSelectedPaths(remainingPaths, true); // trueË°®Á§∫ÈáçÊñ∞Êâ´Êèè
    } else {
        handleClearSelection();
    }
}

// Êõ¥Êñ∞Ë∑ØÂæÑÂàóË°®ÊòæÁ§∫
function updatePathList() {
    if (selectedPaths.size === 0) {
        elements.pathList.style.display = 'none';
        return;
    }

    elements.pathList.style.display = 'block';
    elements.pathItems.innerHTML = '';

    selectedPaths.forEach(path => {
        const item = document.createElement('div');
        item.className = 'path-item';
        item.innerHTML = `
            <span class="path-text" title="${path}">${path}</span>
            <button class="remove-path" onclick="removePath('${path.replace(/'/g, "\\'")}')">ÁßªÈô§</button>
        `;
        elements.pathItems.appendChild(item);
    });
}

// Êõ¥Êñ∞Êñá‰ª∂ÂàóË°®ÊòæÁ§∫
function updateFileList() {
    if (selectedFiles.length === 0) {
        elements.fileList.style.display = 'none';
        elements.clearSelection.style.display = 'none';
        return;
    }

    elements.fileList.style.display = 'block';
    elements.clearSelection.style.display = 'inline-flex';
    elements.fileItems.innerHTML = '';

    let totalLines = 0;

    selectedFiles.forEach(file => {
        const item = document.createElement('div');
        item.className = 'file-item';
        item.innerHTML = `
            <span class="file-icon">üìÑ</span>
            <span class="file-name">${file.name}</span>
            <span class="file-path">${file.path}</span>
            <span class="file-lines">${file.lines || 0} Ë°å</span>
        `;
        elements.fileItems.appendChild(item);
        totalLines += file.lines || 0;
    });

    elements.fileCount.textContent = selectedFiles.length;
    elements.totalLines.textContent = totalLines;
}

// Ëß£Êûê‰ª£Á†ÅÂπ∂È¢ÑËßà
async function parseAndPreview() {
    if (selectedFiles.length === 0) {
        elements.preview.style.display = 'none';
        elements.generateBtn.disabled = true;
        return;
    }
    
    showProgress('Ê≠£Âú®Ëß£Êûê‰ª£Á†Å...');
    
    try {
        const parseOptions = {
            removeComments: currentSettings.removeComments,
            removeEmptyLines: currentSettings.removeEmptyLines
        };
        
        const result = await window.electronAPI.parseCode(selectedFiles, parseOptions);
        parsedCode = result.content;
        
        updatePreview(result);
        elements.generateBtn.disabled = false;
        
        hideProgress();
    } catch (error) {
        hideProgress();
        showError('Ëß£Êûê‰ª£Á†ÅÊó∂Âá∫ÈîôÔºö' + error.message);
    }
}

// Êõ¥Êñ∞È¢ÑËßà
function updatePreview(parseResult) {
    elements.preview.style.display = 'block';

    const totalLines = parseResult.totalLines;
    const totalPages = Math.ceil(totalLines / currentSettings.linesPerPage);

    // Ê†πÊçÆÈ°µÁ†ÅÊ®°ÂºèËÆ°ÁÆóÂÆûÈôÖËæìÂá∫È°µÊï∞ÂíåÈ°µÁ†ÅËåÉÂõ¥
    let outputPages = totalPages;
    let outputLines = totalLines;
    let pageRangeText = '';

    if (currentSettings.pageMode === 'custom' && currentSettings.pageRange) {
        try {
            const customPages = parsePageRange(currentSettings.pageRange, totalPages);
            outputPages = customPages.length;
            
            // ËÆ°ÁÆóËá™ÂÆö‰πâÈ°µÁ†ÅËåÉÂõ¥ÂØπÂ∫îÁöÑÂÆûÈôÖË°åÊï∞
            outputLines = calculateCustomPageLines(customPages, totalLines, currentSettings.linesPerPage);
            
            pageRangeText = ` (Ëá™ÂÆö‰πâÈ°µÁ†ÅÔºö${currentSettings.pageRange}ÔºåËæìÂá∫${outputPages}È°µ)`;
        } catch (error) {
            pageRangeText = ` (È°µÁ†ÅËåÉÂõ¥Ê†ºÂºèÈîôËØØ)`;
            outputPages = 0;
            outputLines = 0;
        }
    } else {
        pageRangeText = ` (ÂÖ®ÈÉ®È°µÈù¢)`;
    }

    elements.previewLines.textContent = outputLines;
    elements.estimatedPages.textContent = `${outputPages}È°µËæìÂá∫${pageRangeText}`;

    // ÊòæÁ§∫ÂâçÂá†Ë°å‰Ωú‰∏∫È¢ÑËßà
    const previewLines = parseResult.content.split('\n').slice(0, 20);
    elements.previewContent.textContent = previewLines.join('\n') + '\n...(Êõ¥Â§öÂÜÖÂÆπ)';
}

/**
 * ËÆ°ÁÆóËá™ÂÆö‰πâÈ°µÁ†ÅËåÉÂõ¥ÂØπÂ∫îÁöÑÂÆûÈôÖË°åÊï∞
 * @param {Array} customPages - Ëá™ÂÆö‰πâÈ°µÁ†ÅÊï∞ÁªÑ
 * @param {number} totalLines - ÊÄªË°åÊï∞
 * @param {number} linesPerPage - ÊØèÈ°µË°åÊï∞
 * @returns {number} ÂÆûÈôÖË°åÊï∞
 */
function calculateCustomPageLines(customPages, totalLines, linesPerPage) {
    let actualLines = 0;
    
    customPages.forEach(pageNum => {
        const startLine = (pageNum - 1) * linesPerPage;
        const endLine = Math.min(startLine + linesPerPage, totalLines);
        const pageLines = endLine - startLine;
        actualLines += pageLines;
    });
    
    return actualLines;
}

// Êõ¥Êñ∞ËÆæÁΩÆ
function updateSettings() {
    currentSettings.linesPerPage = parseInt(elements.linesPerPage.value);
    currentSettings.headerText = elements.headerText.value;
    currentSettings.pageMode = elements.pageMode.value;
    currentSettings.pageRange = elements.pageRange.value;
    currentSettings.removeComments = elements.removeComments.checked;
    currentSettings.removeEmptyLines = elements.removeEmptyLines.checked;
    
    // ÈáçÊñ∞Ëß£ÊûêÂíåÈ¢ÑËßà
    if (selectedFiles.length > 0) {
        parseAndPreview();
    }
}

// Ëß£ÊûêÈ°µÁ†ÅËåÉÂõ¥Â≠óÁ¨¶‰∏≤
function parsePageRange(rangeStr, totalPages) {
    const pages = [];
    const ranges = rangeStr.split(',');
    
    for (const range of ranges) {
        const trimmedRange = range.trim();
        
        if (trimmedRange.includes('-')) {
            // Â§ÑÁêÜËåÉÂõ¥ÔºåÂ¶Ç "1-20"
            const [start, end] = trimmedRange.split('-').map(num => parseInt(num.trim()));
            
            if (isNaN(start) || isNaN(end) || start < 1 || end > totalPages || start > end) {
                throw new Error(`Êó†ÊïàÁöÑÈ°µÁ†ÅËåÉÂõ¥: ${trimmedRange}`);
            }
            
            for (let i = start; i <= end; i++) {
                if (!pages.includes(i)) {
                    pages.push(i);
                }
            }
        } else {
            // Â§ÑÁêÜÂçï‰∏™È°µÁ†ÅÔºåÂ¶Ç "5"
            const page = parseInt(trimmedRange);
            
            if (isNaN(page) || page < 1 || page > totalPages) {
                throw new Error(`Êó†ÊïàÁöÑÈ°µÁ†Å: ${trimmedRange}`);
            }
            
            if (!pages.includes(page)) {
                pages.push(page);
            }
        }
    }
    
    return pages.sort((a, b) => a - b);
}

// ÁîüÊàêÊñáÊ°£
async function handleGenerate() {
    if (!parsedCode) {
        showError('ËØ∑ÂÖàÈÄâÊã©Êñá‰ª∂');
        return;
    }
    
    try {
        // ÈÄâÊã©‰øùÂ≠ò‰ΩçÁΩÆ - Âè™ÊîØÊåÅWordÊ†ºÂºè
        const saveResult = await window.electronAPI.saveDocument({
            format: 'docx'
        });

        if (saveResult.canceled) {
            return;
        }

        showProgress('Ê≠£Âú®ÁîüÊàêWordÊñáÊ°£...');

        const generateOptions = {
            ...currentSettings,
            savePath: saveResult.filePath,
            content: parsedCode
        };

        await window.electronAPI.generateDocument(generateOptions);

        hideProgress();
        showSuccess('WordÊñáÊ°£ÁîüÊàêÊàêÂäüÔºÅ');
        updateStatus('WordÊñáÊ°£ÁîüÊàêÂÆåÊàê');

    } catch (error) {
        hideProgress();
        showError('ÁîüÊàêÊñáÊ°£Êó∂Âá∫ÈîôÔºö' + error.message);
    }
}

// ÊòæÁ§∫ËøõÂ∫¶
function showProgress(text) {
    elements.progressText.textContent = text;
    elements.progressModal.style.display = 'flex';
}

// ÈöêËóèËøõÂ∫¶
function hideProgress() {
    elements.progressModal.style.display = 'none';
}

// Êõ¥Êñ∞Áä∂ÊÄÅ
function updateStatus(text) {
    elements.statusText.textContent = text;
}

// ÊòæÁ§∫ÈîôËØØ
function showError(message) {
    alert('ÈîôËØØÔºö' + message);
    updateStatus('ÈîôËØØÔºö' + message);
}

// ÊòæÁ§∫ÊàêÂäü
function showSuccess(message) {
    alert(message);
    updateStatus(message);
}

// Â∞ÜÂáΩÊï∞Êö¥Èú≤Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü
window.removePath = removePath;

// ÂàùÂßãÂåñÂ∫îÁî®
document.addEventListener('DOMContentLoaded', () => {
    initializeEventListeners();
    updateStatus('Â∞±Áª™');
});
